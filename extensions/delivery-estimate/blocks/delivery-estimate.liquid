{% comment %}
  EstimaTrack Delivery Estimate Block
  Displays dynamic delivery estimates based on product and customer location
  Fetches real data from Supabase database with shop validation
{% endcomment %}

<div class="delivery-estimate-block" 
     data-product-id="{{ product.id }}" 
     data-product-tags="{{ product.tags | join: ',' }}"
     data-product-type="{{ product.type }}"
     data-product-vendor="{{ product.vendor }}"
     data-shop-domain="{{ shop.permanent_domain }}"
     data-variant-id="{{ product.selected_or_first_available_variant.id }}">
  
  <div class="delivery-estimate-container">
    <div class="delivery-estimate-header">
      <svg class="delivery-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
      <h3 class="delivery-title">{{ block.settings.title | default: 'Estimated Delivery' }}</h3>
    </div>
    
    <div class="delivery-content">
      <div class="delivery-loading" style="display: flex;">
        <div class="loading-spinner"></div>
        <span>Calculating delivery time...</span>
      </div>
      
      <div class="delivery-result" style="display: none;">
        <div class="delivery-time">
          <span class="delivery-estimate-text">Loading delivery estimate...</span>
          <div class="custom-message" style="display: none;"></div>
        </div>
        
        {% if block.settings.show_location_selector %}
        <div class="location-selector">
          <label for="country-select-{{ block.id }}">Deliver to:</label>
          <select id="country-select-{{ block.id }}" class="country-dropdown">
            <option value="US">🇺🇸 United States</option>
            <option value="CA">🇨🇦 Canada</option>
            <option value="GB">🇬🇧 United Kingdom</option>
            <option value="AU">🇦🇺 Australia</option>
            <option value="DE">🇩🇪 Germany</option>
            <option value="FR">🇫🇷 France</option>
            <option value="JP">🇯🇵 Japan</option>
            <option value="IT">🇮🇹 Italy</option>
            <option value="ES">🇪🇸 Spain</option>
            <option value="NL">🇳🇱 Netherlands</option>
            <option value="*">🌍 Other Countries</option>
          </select>
        </div>
        {% endif %}
        
        {% if block.settings.show_delivery_date %}
        <div class="delivery-date" style="display: none;">
          <small class="delivery-date-text"></small>
        </div>
        {% endif %}
      </div>
      
      <div class="delivery-error" style="display: none;">
        <span class="error-message">Unable to calculate delivery time. Please try again.</span>
        <button class="retry-button" onclick="window.deliveryEstimate.retry()">Retry</button>
      </div>
    </div>
  </div>
</div>

<style>
  .delivery-estimate-block {
    margin: 16px 0;
    padding: 20px;
    border: 1px solid #e1e3e5;
    border-radius: 12px;
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }
  
  .delivery-estimate-block:hover {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  }
  
  .delivery-estimate-header {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 16px;
  }
  
  .delivery-icon {
    color: #2563eb;
    flex-shrink: 0;
  }
  
  .delivery-title {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
    color: #1f2937;
    line-height: 1.2;
  }
  
  .delivery-loading {
    display: flex;
    align-items: center;
    gap: 10px;
    color: #6b7280;
    padding: 8px 0;
  }
  
  .loading-spinner {
    width: 18px;
    height: 18px;
    border: 2px solid #e5e7eb;
    border-top: 2px solid #2563eb;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .delivery-time {
    margin-bottom: 12px;
  }
  
  .delivery-estimate-text {
    font-size: 16px;
    font-weight: 600;
    color: #059669;
    display: block;
    margin-bottom: 4px;
  }
  
  .custom-message {
    font-size: 14px;
    color: #6b7280;
    font-style: italic;
  }
  
  .delivery-date {
    margin-top: 8px;
  }
  
  .delivery-date-text {
    font-size: 12px;
    color: #9ca3af;
  }
  
  .location-selector {
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid #e5e7eb;
  }
  
  .location-selector label {
    display: block;
    font-size: 13px;
    font-weight: 500;
    color: #374151;
    margin-bottom: 6px;
  }
  
  .country-dropdown {
    width: 100%;
    padding: 10px 14px;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 14px;
    background-color: white;
    cursor: pointer;
    transition: border-color 0.2s ease;
  }
  
  .country-dropdown:focus {
    outline: none;
    border-color: #2563eb;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }
  
  .delivery-error {
    color: #dc2626;
    font-size: 14px;
    text-align: center;
    padding: 12px;
    background-color: #fef2f2;
    border-radius: 8px;
    border: 1px solid #fecaca;
  }
  
  .retry-button {
    margin-top: 8px;
    padding: 6px 12px;
    background-color: #dc2626;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .retry-button:hover {
    background-color: #b91c1c;
  }
  
  @media (max-width: 768px) {
    .delivery-estimate-block {
      margin: 12px 0;
      padding: 16px;
    }
    
    .delivery-title {
      font-size: 16px;
    }
    
    .delivery-estimate-text {
      font-size: 14px;
    }
  }
</style>

<script>
  (function() {
    console.log('🚀 EstimaTrack Extension: Starting initialization');
    
    const deliveryBlock = document.querySelector('.delivery-estimate-block');
    if (!deliveryBlock) {
      console.error('❌ EstimaTrack Extension: Delivery block not found');
      return;
    }
    
    console.log('✅ EstimaTrack Extension: Delivery block found', deliveryBlock);
    
    const productId = deliveryBlock.dataset.productId;
    const productTags = deliveryBlock.dataset.productTags;
    const productType = deliveryBlock.dataset.productType;
    const productVendor = deliveryBlock.dataset.productVendor;
    const shopDomain = deliveryBlock.dataset.shopDomain;
    const variantId = deliveryBlock.dataset.variantId;
    
    console.log('📦 EstimaTrack Extension: Extracted product data:', {
      productId,
      productTags,
      productType,
      productVendor,
      shopDomain,
      variantId
    });
    const countrySelect = deliveryBlock.querySelector('.country-dropdown');
    const deliveryText = deliveryBlock.querySelector('.delivery-estimate-text');
    const customMessage = deliveryBlock.querySelector('.custom-message');
    const deliveryDate = deliveryBlock.querySelector('.delivery-date');
    const deliveryDateText = deliveryBlock.querySelector('.delivery-date-text');
    const loadingDiv = deliveryBlock.querySelector('.delivery-loading');
    const resultDiv = deliveryBlock.querySelector('.delivery-result');
    const errorDiv = deliveryBlock.querySelector('.delivery-error');
    
    console.log('🎯 EstimaTrack Extension: DOM elements found:', {
      countrySelect: !!countrySelect,
      deliveryText: !!deliveryText,
      customMessage: !!customMessage,
      deliveryDate: !!deliveryDate,
      deliveryDateText: !!deliveryDateText,
      loadingDiv: !!loadingDiv,
      resultDiv: !!resultDiv,
      errorDiv: !!errorDiv
    });
    
    // Global retry function
    window.deliveryEstimate = {
      retry: function() {
        const selectedCountry = countrySelect ? countrySelect.value : 'US';
        console.log('🔄 EstimaTrack Extension: Retry triggered with country:', selectedCountry);
        fetchDeliveryEstimate(selectedCountry);
      }
    };
    
    console.log('🌐 EstimaTrack Extension: Global retry function registered.');
    
    function calculateDeliveryDate(estimateDays) {
      console.log('📅 EstimaTrack Extension: Calculating delivery date for:', estimateDays);
      
      const today = new Date();
      const match = estimateDays.match(/(\d+)(?:-(\d+))?\s*(?:business\s*)?days?/i);
      
      console.log('🔍 EstimaTrack Extension: Regex match result:', match);
      
      if (!match) {
        console.warn('⚠️ EstimaTrack Extension: No days pattern found in estimate.');
        return null;
      }
      
      const minDays = parseInt(match[1]);
      const maxDays = match[2] ? parseInt(match[2]) : minDays;
      const avgDays = Math.ceil((minDays + maxDays) / 2);
      
      console.log('📊 EstimaTrack Extension: Date calculation details:', {
        minDays,
        maxDays,
        avgDays,
        today: today.toISOString()
      });
      
      let deliveryDate = new Date(today);
      let addedDays = 0;
      
      while (addedDays < avgDays) {
        deliveryDate.setDate(deliveryDate.getDate() + 1);
        // Skip weekends (Saturday = 6, Sunday = 0)
        if (deliveryDate.getDay() !== 0 && deliveryDate.getDay() !== 6) {
          addedDays++;
        }
      }
      
      const formattedDate = deliveryDate.toLocaleDateString('en-US', {
        weekday: 'short',
        month: 'short',
        day: 'numeric'
      });
      
      console.log('📅 EstimaTrack Extension: Final calculated date:', formattedDate);
      
      return formattedDate;
    }
    
    async function fetchDeliveryEstimate(country = 'US') {
      console.log('🌍 EstimaTrack Extension: Starting fetchDeliveryEstimate with country:', country);
      
      try {
        console.log('🔄 EstimaTrack Extension: Setting loading state');
        loadingDiv.style.display = 'flex';
        resultDiv.style.display = 'none';
        errorDiv.style.display = 'none';
        
        // Build comprehensive API request
        const params = new URLSearchParams({
          productId: productId,
          tags: productTags || '',
          country: country,
          shop: shopDomain,
          variantId: variantId || '',
          productType: productType || '',
          vendor: productVendor || ''
        });
        
        const apiUrl = `{{ block.settings.api_endpoint | default: '/data/api/delivery-estimate' }}?${params.toString()}`;
        
        // Debug alert before request
        alert(`[extensions/delivery-estimate/blocks/delivery-estimate.liquid] 🚀 About to make API request to: ${apiUrl}\n\nParameters:\n${JSON.stringify(Object.fromEntries(params), null, 2)}`);
        
        console.log('📡 EstimaTrack Extension: API request details:', {
          url: apiUrl,
          params: Object.fromEntries(params),
          method: 'GET'
        });
        
        const response = await fetch(apiUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
          },
          cache: 'no-cache'
        });
        
        console.log('📥 EstimaTrack Extension: Response received:', {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok,
          headers: Object.fromEntries(response.headers.entries())
        });
        
        // Debug alert after response
        alert(`[extensions/delivery-estimate/blocks/delivery-estimate.liquid] 📥 API Response received:\n\nStatus: ${response.status} ${response.statusText}\nOK: ${response.ok}\nURL: ${apiUrl}`);
        
        if (!response.ok) {
          const errorText = await response.text();
          
          // Debug alert for error response
          alert(`[extensions/delivery-estimate/blocks/delivery-estimate.liquid] ❌ API Error Response:\n\nStatus: ${response.status} ${response.statusText}\nError Text: ${errorText}\nFull URL: ${window.location.origin}${apiUrl}`);
          
          console.error('❌ EstimaTrack Extension: HTTP error response:', {
            status: response.status,
            statusText: response.statusText,
            body: errorText
          });
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('📊 EstimaTrack Extension: Parsed response data:', data);
        
        // Validate API response structure
        console.log('🔍 EstimaTrack Extension: Validating response structure');
        if (!data || typeof data.estimate !== 'string') {
          console.error('❌ EstimaTrack Extension: Invalid response structure:', {
            hasData: !!data,
            estimateType: typeof data?.estimate,
            estimateValue: data?.estimate
          });
          throw new Error('Invalid API response: missing estimate field');
        }
        
        console.log('✅ EstimaTrack Extension: Response validation passed');
        
        // Update UI with delivery estimate
        console.log('🎨 EstimaTrack Extension: Updating UI with estimate:', data.estimate);
        loadingDiv.style.display = 'none';
        resultDiv.style.display = 'block';
        
        if (deliveryText) {
          deliveryText.textContent = `📦 ${data.estimate}`;
          console.log('📝 EstimaTrack Extension: Updated delivery text element');
        }
        
        // Show custom message if available
        if (data.customMessage && customMessage) {
          customMessage.textContent = data.customMessage;
          customMessage.style.display = 'block';
        } else if (customMessage) {
          customMessage.style.display = 'none';
        }
        
        // Calculate and display delivery date if estimate contains days
        const deliveryDateResult = calculateDeliveryDate(data.estimate);
        console.log('📅 EstimaTrack Extension: Calculated delivery date:', deliveryDateResult);
        if (deliveryDateResult && deliveryDate && deliveryDateText) {
          deliveryDate.style.display = 'block';
          deliveryDateText.textContent = `Expected by: ${deliveryDateResult}`;
          console.log('📅 EstimaTrack Extension: Updated delivery date display');
        }
        
      } catch (error) {
        console.error('💥 EstimaTrack Extension: Error occurred:', error);
        
        loadingDiv.style.display = 'none';
        resultDiv.style.display = 'none';
        errorDiv.style.display = 'block';
        
        // Enhanced error logging with context
        const errorContext = {
          error: error.message,
          variantId: variantId,
          productType: productType,
          productVendor: productVendor,
          apiEndpoint: '{{ block.settings.api_endpoint | default: '/data/api/delivery-estimate' }}',
          timestamp: new Date().toISOString(),
          country: country,
          retryCount: fetchDeliveryEstimate.retryCount || 0
        };
        
        console.error('📋 EstimaTrack Extension: Error context:', errorContext);
        
        // Retry logic with exponential backoff
        if (!fetchDeliveryEstimate.retryCount) {
          fetchDeliveryEstimate.retryCount = 0;
        }
        
        if (fetchDeliveryEstimate.retryCount < 2) {
          fetchDeliveryEstimate.retryCount++;
          const delay = Math.pow(2, fetchDeliveryEstimate.retryCount) * 1000;
          console.log(`🔄 EstimaTrack Extension: Retrying in ${delay}ms (attempt ${fetchDeliveryEstimate.retryCount}/2)`);
          setTimeout(() => {
            fetchDeliveryEstimate(country);
          }, delay);
        } else {
          console.error('❌ EstimaTrack Extension: Max retries reached, giving up');
        }
      }
    }
    
    // Auto-detect country based on user's location
    function detectCountry() {
      console.log('🌍 EstimaTrack Extension: Starting country detection');
      
      if (navigator.geolocation) {
        console.log('📍 EstimaTrack Extension: Geolocation API available, requesting position');
        navigator.geolocation.getCurrentPosition(
          function(position) {
            console.log('📍 EstimaTrack Extension: Geolocation success:', {
              latitude: position.coords.latitude,
              longitude: position.coords.longitude
            });
            // This is a simplified country detection
            // In a real implementation, you'd use a geolocation API
            const defaultCountry = 'US';
            console.log('🏳️ EstimaTrack Extension: Using default country (geolocation):', defaultCountry);
            if (countrySelect) {
              countrySelect.value = defaultCountry;
            }
            fetchDeliveryEstimate(defaultCountry);
          },
          function(error) {
            console.warn('⚠️ EstimaTrack Extension: Geolocation failed:', error.message);
            // Fallback to default country if geolocation fails
            const defaultCountry = 'US';
            console.log('🏳️ EstimaTrack Extension: Using default country (fallback):', defaultCountry);
            if (countrySelect) {
              countrySelect.value = defaultCountry;
            }
            fetchDeliveryEstimate(defaultCountry);
          }
        );
      } else {
        console.warn('⚠️ EstimaTrack Extension: Geolocation not supported');
        // Geolocation not supported, use default
        const defaultCountry = 'US';
        console.log('🏳️ EstimaTrack Extension: Using default country (no geolocation):', defaultCountry);
        if (countrySelect) {
          countrySelect.value = defaultCountry;
        }
        fetchDeliveryEstimate(defaultCountry);
      }
    }
    
    // Detect user's country from browser if possible
    function detectUserCountry() {
      console.log('🌍 EstimaTrack Extension: Detecting user country from browser');
      
      if (navigator.language) {
        const locale = navigator.language.toLowerCase();
        
        console.log('🗣️ EstimaTrack Extension: Browser language detection:', {
          language: navigator.language,
          locale: locale
        });
        
        const countryMap = {
          'en-us': 'US',
          'en-ca': 'CA',
          'en-gb': 'GB',
          'en-au': 'AU',
          'de': 'DE',
          'fr': 'FR',
          'ja': 'JP',
          'it': 'IT',
          'es': 'ES',
          'nl': 'NL'
        };
        
        for (const [lang, country] of Object.entries(countryMap)) {
          if (locale.startsWith(lang)) {
            console.log('🏳️ EstimaTrack Extension: Final detected country:', country);
            return country;
          }
        }
      }
      
      console.log('🏳️ EstimaTrack Extension: Using default country fallback: US');
      return 'US'; // Default fallback
    }
    
    // Event listeners
    console.log('🎧 EstimaTrack Extension: Setting up event listeners');
    
    if (countrySelect) {
      countrySelect.addEventListener('change', function() {
        const selectedCountry = this.value;
        console.log('🔄 EstimaTrack Extension: Country changed to:', selectedCountry);
        fetchDeliveryEstimate(selectedCountry);
      });
      console.log('✅ EstimaTrack Extension: Country select listener added');
    } else {
      console.warn('⚠️ EstimaTrack Extension: Country select element not found, skipping listener');
    }
    
    // Check network status and retry if needed
    window.addEventListener('online', function() {
      console.log('🌐 EstimaTrack Extension: Network came back online');
      if (errorDiv && errorDiv.style.display === 'block') {
        const selectedCountry = countrySelect ? countrySelect.value : 'US';
        console.log('🔄 EstimaTrack Extension: Retrying after network reconnection with country:', selectedCountry);
        fetchDeliveryEstimate(selectedCountry);
      }
    });
    console.log('✅ EstimaTrack Extension: Network status listener added');
    
    // Initial load
     console.log('🚀 EstimaTrack Extension: Starting initial load process');
     const initialCountry = detectUserCountry();
     
     console.log('🎯 EstimaTrack Extension: Setting initial country:', initialCountry);
     if (countrySelect) {
       countrySelect.value = initialCountry;
       console.log('✅ EstimaTrack Extension: Country select value set to:', initialCountry);
     } else {
       console.warn('⚠️ EstimaTrack Extension: Country select not available for initial value');
     }
     
     console.log('🚀 EstimaTrack Extension: Making initial API call');
      fetchDeliveryEstimate(initialCountry);
      
      console.log('✅ EstimaTrack Extension: Initialization complete');
    
    // Retry on network errors after delay
    let retryCount = 0;
    const maxRetries = 3;
    
    function retryWithBackoff() {
      if (retryCount < maxRetries) {
        retryCount++;
        const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff
        setTimeout(() => {
          const selectedCountry = countrySelect ? countrySelect.value : initialCountry;
          fetchDeliveryEstimate(selectedCountry);
        }, delay);
      }
    }
    
  })();
</script>

{% schema %}
{
  "name": "Delivery Estimate",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Block Title",
      "default": "Estimated Delivery",
      "info": "The title displayed above the delivery estimate"
    },
    {
      "type": "checkbox",
      "id": "show_location_selector",
      "label": "Show Country Selector",
      "default": true,
      "info": "Allow customers to select their delivery country"
    },
    {
      "type": "checkbox",
      "id": "show_delivery_date",
      "label": "Show Expected Delivery Date",
      "default": true,
      "info": "Calculate and display the expected delivery date"
    }
  ]
}
{% endschema %}